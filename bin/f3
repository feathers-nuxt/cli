#!/usr/bin/env node

const path = require('path')

const chalk = require('chalk')
const consola = require('consola')
const spawn = require('cross-spawn')
const pretty = require('pretty-error')

const pkg = require('../package.json')

const log = consola.withScope('f3')

global.consola = consola

const defaultCommand = 'dev'
const commands = new Set([ 
	defaultCommand, 
	'dev', 
	'build', 
	'build-client',  
	'build-server', 
	'start', 
	'migrate',
	'remote', 
	'deploy',
	'seed'
])

let cmd = process.argv[2] || '--help'
let args

if (new Set(['--version', '-v']).has(cmd)) {
	log.ready(`version ${pkg.version}`)
	process.exit(0)
}

if(new Set(['--help', '-h']).has(cmd)) {
log.ready(`${chalk.yellow(' fullstack feathers framework ')} 
${chalk.white(' Usage ')}
  ${chalk.white('$ f3 <command>')}
${chalk.cyan(' Avalable commands')}
  ${chalk.blue(Array.from(commands).join(' '))}

${chalk.gray('For more information run a command with the --help flag')}
	`)
	process.exit(0)
}

if (commands.has(cmd)) {
	args = process.argv.slice(3)
} else {
	cmd = defaultCommand
	args = process.argv.slice(2)
}

const bin = path.resolve(path.join(__dirname, cmd))

const startProcess = () => {
	const proc = spawn(bin, args, { 
		stdio: 'inherit'
	})
	proc.on('close', (code) => {
		if (code) {
			log.fatal(`${cmd} failed!`)			
		} else {
			log.success(`${cmd} done!`)	
		}
		process.exit(code)
	})
	proc.on('error', (err) => {
		pe = new pretty()
		console.error('err', pe.render(err))
		process.exit(1)
	})
	return proc
}

const proc = startProcess()